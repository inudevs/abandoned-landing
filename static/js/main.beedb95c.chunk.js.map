{"version":3,"sources":["pages/index.ts","App.tsx","utils/useTheme.tsx","serviceWorker.tsx","index.tsx"],"names":["About","loadable","Course","Home","Job","JobDeveloper","App","useState","theme","setTheme","useEffect","localTheme","window","localStorage","getItem","setItem","useTheme","AppContainer","mode","ContentWrap","exact","path","component","styled","div","media","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAEaA,EAAQC,aAAS,kBAAM,iCACvBC,EAASD,aAAS,kBAAM,iCACxBE,EAAOF,aAAS,kBAAM,8DACtBG,EAAMH,aAAS,kBAAM,kCAGrBI,GADcJ,aAAS,kBAAM,kCACdA,aAAS,kBAAM,+DAChBA,aAAS,kBAAM,kC,sVCa1C,IA+BeK,EA/BO,WAAO,IAAD,EChBb,WAAqC,IAAD,EACvBC,mBAAgB,SADO,mBAC1CC,EAD0C,KACnCC,EADmC,KAwBjD,OAfAC,qBACE,WACE,IAAMC,EAAaC,OAAOC,aAAaC,QAAQ,SAC3CH,GACFF,EAASE,KAGb,IAGFD,qBACE,kBAAME,OAAOC,aAAaE,QAAQ,QAASP,KAC3C,CAACA,IAGI,CAACA,EArBY,WAClBC,EACY,UAAVD,EAAoB,OAAS,WDYJQ,GADH,mBACnBR,EADmB,UAG1B,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAACS,EAAD,KAKE,kBAAC,IAAD,CACET,MAAO,CAAEU,KAAMV,IAEf,kBAACW,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,SAASC,UAAWtB,IACtC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,UAAUC,UAAWpB,IACvC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,OAAOC,UAAWlB,IACpC,kBAAC,IAAD,CAAOiB,KAAK,iBAAiBC,UAAWjB,WAYlDY,EAAeM,IAAOC,IAAV,IAKdC,YAAM,aAKJN,EAAcI,IAAOC,IAAV,IAKbC,YAAM,aExDUC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.beedb95c.chunk.js","sourcesContent":["import loadable from '@loadable/component';\n\nexport const About = loadable(() => import('./About'));\nexport const Course = loadable(() => import('./Course'));\nexport const Home = loadable(() => import('./Home'));\nexport const Job = loadable(() => import('./Job'));\n\nexport const JobDesigner = loadable(() => import('./jobs/Designer'));\nexport const JobDeveloper = loadable(() => import('./jobs/Developer'));\nexport const JobMarketer = loadable(() => import('./jobs/Marketer'));\n","import media from 'css-in-js-media';\nimport React from 'react';\nimport Normalize from 'react-normalize';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport styled, { ThemeProvider } from 'styled-components';\n\n// import Navbar from './components/templates/Navbar';\n\nimport {\n  About,\n  Course,\n  Home,\n  Job,\n  JobDeveloper,\n} from './pages';\n\nimport useTheme from './utils/useTheme';\n\nconst App: React.FC = () => {\n  const [theme, toggleTheme] = useTheme();\n\n  return (\n    <>\n      <Normalize />\n      <Router>\n        <AppContainer>\n          {/* <Navbar\n            theme={theme}\n            onToggleTheme={toggleTheme}\n          /> */}\n          <ThemeProvider\n            theme={{ mode: theme }}\n          >\n            <ContentWrap>\n              <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/course\" component={Course} />\n                <Route exact path=\"/job\" component={Job} />\n                <Route path=\"/job/developer\" component={JobDeveloper} />\n              </Switch>\n            </ContentWrap>\n          </ThemeProvider>\n        </AppContainer>\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n\nconst AppContainer = styled.div`\n  display: flex;\n  height: auto;\n  min-height: 100vh;\n\n  ${media('<=tablet')} {\n    flex-direction: column;\n  }\n`;\n\nconst ContentWrap = styled.div`\n  display: flex;\n  flex: 1 1;\n  width: calc(100% - 13.5rem);\n\n  ${media('<=tablet')} {\n    width: 100%;\n  }\n`;\n","import { useEffect, useState } from 'react';\n\nexport type Theme = 'light' | 'dark';\n\ntype UseThemeReturn = readonly [Theme, () => void];\n\nexport default function useTheme(): UseThemeReturn {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  const toggleTheme = () => {\n    setTheme(\n      theme === 'light' ? 'dark' : 'light',\n    );\n  };\n\n  useEffect(\n    () => {\n      const localTheme = window.localStorage.getItem('theme') as Theme;\n      if (localTheme) {\n        setTheme(localTheme);\n      }\n    },\n    [],\n  );\n\n  useEffect(\n    () => window.localStorage.setItem('theme', theme),\n    [theme],\n  );\n\n  return [theme, toggleTheme];\n}\n","// tslint:disable:no-console\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL as string,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/Index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}